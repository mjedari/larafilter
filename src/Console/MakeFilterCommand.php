<?php

namespace Mjedari\Larafilter\Console;

use Illuminate\Console\GeneratorCommand;
use Mjedari\Larafilter\Facades\LaraFilter;
use Symfony\Component\Console\Input\InputArgument;

class MakeFilterCommand extends GeneratorCommand
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $name = 'make:filter';

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $type = 'filter';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new query filter class.';

    /**
     * Get the console command arguments.
     *
     * @return array
     */
    protected function getArguments()
    {
        return [
            ['name', InputArgument::REQUIRED, 'The name of the filter'],
        ];
    }

    /**
     * Get the desired class name from the input.
     *
     * @return string
     */
    protected function getNameInput()
    {
        return ucfirst(trim($this->argument('name')));
    }

    protected function getStub()
    {
        return __DIR__.'/stubs/filter.php.stub';
    }

    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.'\Filters';
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        parent::handle();

        $this->doOtherOperations();
    }

    protected function doOtherOperations()
    {
        if (larafilter::configNotPublished()) {
            return $this->warn('Please publish the config file by running '.
                '\'php artisan vendor:publish --tag=larafilter-config\'');
        }

        // Get the fully qualified class name (FQN)
        $class = $this->qualifyClass($this->getNameInput());

        // get the destination path, based on the default namespace
        $path = $this->getPath($class);

        $content = file_get_contents($path);

        // Update the file content with additional data (regular expressions)

        file_put_contents($path, $content);
    }

    protected function rootNamespace()
    {
        return $this->laravel->getNamespace();
    }

    protected function getPath($name)
    {
        return parent::getPath($name); // TODO: Change the autogenerated stub
    }
}
